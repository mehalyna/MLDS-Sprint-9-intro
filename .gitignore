# Byte-compiled / optimized / DLL files<<<<<<< HEAD

__pycache__/# Python

*.py[cod]__pycache__/

*$py.class*.py[cod]

*$py.class

# C extensions*.so

*.so=======

# Byte-compiled / optimized / DLL files

# Distribution / packaging__pycache__/

.Python*.py[codz]

build/*$py.class

develop-eggs/

dist/# C extensions

downloads/*.so

eggs/

.eggs/# Distribution / packaging

lib/>>>>>>> 71b31db48519281d58616493be62b8dcd8ad68d5

lib64/.Python

parts/build/

sdist/develop-eggs/

var/dist/

wheels/downloads/

pip-wheel-metadata/eggs/

share/python-wheels/.eggs/

*.egg-info/lib/

.installed.cfglib64/

*.eggparts/

MANIFESTsdist/

var/

# PyInstallerwheels/

*.manifest<<<<<<< HEAD

*.spec*.egg-info/

.installed.cfg

# Unit test / coverage reports*.egg

htmlcov/

.tox/# Virtual environments

.nox/.env

.coverage=======

.coverage.*share/python-wheels/

.cache*.egg-info/

nosetests.xml.installed.cfg

coverage.xml*.egg

*.coverMANIFEST

*.py,cover

.hypothesis/# PyInstaller

.pytest_cache/#  Usually these files are written by a python script from a template

#  before PyInstaller builds the exe, so as to inject date/other infos into it.

# Virtual environments*.manifest

.env*.spec

.venv

env/# Installer logs

venv/pip-log.txt

ENV/pip-delete-this-directory.txt

env.bak/

venv.bak/# Unit test / coverage reports

htmlcov/

# IDEs.tox/

.vscode/.nox/

.idea/.coverage

*.swp.coverage.*

*.swo.cache

*~nosetests.xml

coverage.xml

# Jupyter Notebook*.cover

.ipynb_checkpoints*.py.cover

.hypothesis/

# Generated data files from exercises (but keep notebooks and source code).pytest_cache/

*.csvcover/

*.json

*.xml# Translations

*.txt*.mo

*.log*.pot



# OS generated files# Django stuff:

.DS_Store*.log

.DS_Store?local_settings.py

._*db.sqlite3

.Spotlight-V100db.sqlite3-journal

.Trashes

ehthumbs.db# Flask stuff:

Thumbs.dbinstance/

desktop.ini.webassets-cache



# Keep the important files# Scrapy stuff:

!README.md.scrapy

!*.ipynb

!*.py# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
>>>>>>> 71b31db48519281d58616493be62b8dcd8ad68d5
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

<<<<<<< HEAD
# IDE
.vscode/
.idea/
*.swp
*.swo

# Generated data files from exercises (but keep notebooks and source code)
*.csv
*.json
*.xml
*.txt
*.log

# OS
.DS_Store
Thumbs.db
desktop.ini

# Keep the important files
!README.md
!*.ipynb
!*.py
=======
# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
>>>>>>> 71b31db48519281d58616493be62b8dcd8ad68d5
